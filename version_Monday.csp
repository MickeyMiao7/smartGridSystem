#import "PAT.Lib.Tookit";

// all constant starts with Upper case, while all local variable starts with lower case.
enum{PowerSupplier, Request, PSNonce, PublicKey, PrivateKey, UsageQuery, Price, EncryptedPrice, ExtendNonce, 
	ExtendSeal, ExtendAccept, ExtendReject, UsageInfo, ExtendAdd, ExtendMul, NoPrice};

channel c1 0;
channel c2 0;

// global variable all in upper case.
var REALQUOTE;
var QUOTEMATCH; // if TRE returns real quote
var TPMFINALQUOTE;


// Process of PS
PSProc() = PSConnectTRE();

// 1. send Request and nonce
PSConnectTRE() =
	c1!PowerSupplier.Request ->
	c1!PSNonce ->
	PSConnected();

// 2. get public key and send query
PSConnected() = 
	c1?PublicKey ->
	c1!UsageQuery -> // this part shall be encrypted. However we are not able to encrypt it now.
	PSReceiveResponse();

// 3. receive response from TRE
PSReceiveResponse() = 
	c1?price ->
	c1?quote ->
	if (price == EncryptedPrice) {
		
		PScalculateHash(true, quote)
	}
	else{
		PScalculateHash(false, quote)
	};

// 4. calculate local hash
PScalculateHash(x, quote) = 
	if (x == true) {// PS_nonce -> 9, seal -> 1, accept -> 2, calculate_add -> 3, calculate_multiply -> 4
		calculateHash{REALQUOTE = call(HashFunction1, 9, 1, 2, 3, 4);} ->
		PSJudge(quote)
	}
	else{// PS_nonce -> 9, seal -> 1, reject -> 5
		calculateHash{REALQUOTE = call(HashFunction2, 9, 1, 5);} ->
		PSJudge(quote)
	};

// 5. last step, compare quote and hash
PSJudge(quote) = 
	if (REALQUOTE == quote) {
		judge{QUOTEMATCH = true} -> Skip
	}
	else {
		judge{QUOTEMATCH = false} -> Skip
	};


// Process of TRE
TREProc() = TREStart();

// 1. set up procedure
TREStart() = 
	c1?sender.Request ->
	startTPM -> // simplify the start process
	c1?nonce -> // different from PSNonce, this is a local variable
	c2!ExtendNonce ->
	c2!ExtendSeal ->
	c2?PublicKey ->
	c1!PublicKey ->
	c1?UsageQuery -> // this part shall be encrypted. However we are not able to encrypt it now.
	TREDecide(sender);

// 2. alt process
TREDecide(sender) =
	if (sender == PowerSupplier) {
		TREAccept()
	}
	else{
		TREReject()
	};

// 3. extend accept, query usage, get usage info
TREAccept() =
	c2!ExtendAccept ->
	c2!UsageQuery -> // this part shall be encrypted. However we are not able to encrypt it now.
	c2?UsageInfo ->
	TRECalculatePrice();

// 4. calculate price locally, hash calculate operation
TRECalculatePrice() =
	calculateAdd ->
	calculateMul ->
	c2!ExtendAdd ->
	c2!ExtendMul ->
	TRESendPrice();

// 5. send price to TPM, get encrypted price, send back to PS
TRESendPrice() = 
	c2!Price ->
	c2?EncryptedPrice ->
	c1!EncryptedPrice ->
	TREEnd();

TREReject() = 
	c2!ExtendReject ->
	c1!NoPrice ->
	TREEnd();

TREEnd() = 
	c2?quote -> // note this is local variable, can be int number
	c1!quote ->
	Skip;


// Process of TPM

TPMProc() = TPMStart();

// 1. receive extend nonce, prepare key, receive seal, send public key
TPMStart() = 
	c2?ExtendNonce ->
	ExtendNonceOperation -> //todo
	perpareKeys ->
	c2?ExtendSeal ->
	ExtendSealOperation -> //todo
	c2!PublicKey ->
	TPMBinary();

// 2. TRE accept or reject will lead to different operation
TPMBinary() = // this part is decided by external 
	(TPMAccept()) [] (TPMReject());

TPMAccept() = 
	c2?ExtendAccept ->
	c2?UsageQuery ->
	decryptUsage -> // todo
	c2!UsageInfo ->
	c2?operation -> // local variable (here should be ExtendAdd)
	ExtendAddOperation ->
	c2?operation2 ->
	ExtendMulOperation ->
	c2?Price ->
	encryptPrice ->
	c2!EncryptedPrice ->
	TPMEnd();

TPMReject() = 
	c2?ExtendReject ->
	TPMEnd();

TPMEnd() = 
	c2!91234 -> // send fianl quote
	Skip;

Protocol = PSProc() ||| TREProc() ||| TPMProc();
#define goal QUOTEMATCH == true;
#assert Protocol reaches goal;


