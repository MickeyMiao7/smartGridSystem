// #import "PAT.Lib.Toolkit";

// The functions of "extend" and "calculate price" operations have not been implemented, currently they are used as EXTEND and CALCULATED_PRICE
// The process of encrypt and decrypt have not been implemented

enum{PowerSupplier, request, publicKey, privateKey, usageQuery, usageInfo, PS_nonce, attacker_nonce, calculatedPrice, TPMquote, EXTEND, CALCULATED_PRICE, Nobody};

channel c1 0;                         // channel between Power Supplier and TRE
channel c2 0;                         // channel between TRE and TPM

var realQuote;
var quoteMatch = false;

// var PowerSupplier_TRE_connection = 0; // 0 represents connection not built, 1 represents connection built
// var TRE_TPM_connection = 0; 
var TPMAccept = 0;                       // 0 represents deny the query, 1 represents accept the query

// Process of Power Supplier, it consists of three events:

// Firstly, it connects TRE
PowerSupplierProc() = PowerSupplierConnectTRE();

PowerSupplierConnectTRE() = 
	c1!PowerSupplier.request -> 
	c1!PS_nonce ->
	PowerSupplierConnected();
	
PowerSupplierConnected() = 	c1?publicKey -> QueryPrice(publicKey);

// Secondly, it sends query of price
QueryPrice(pubk) = 
	c1!usageQuery ->             // **** Need to encrypt using pubk ****
	(c1?TPMquote -> 
	PowerSupplierVerifyQuote(TPMquote, 2) []
	c1?priceEncrypted ->         // **** Need to decrypt using pubk ****;
	c1?TPMquote -> 
	PowerSupplierVerifyQuote(TPMquote, 1));

// Thirdly, end connection	
PowerSupplierVerifyQuote(quote, x) = 
	if(x == 1)  //TRE rejects the request from PowerSupplier
	{	
		calculateQuote{realQuote = 43584;} ->
		if(quote == realQuote)
		{
			powerSupplierDisconnectTRE{quoteMatch = true;} ->
			PowerSupplierDisconnectTRE()
		}
		else
		{
			Skip
		}
	}
	else  //TRE rejects the request from PowerSupplier
	{
		calculateQuote{realQuote = 43251;} ->
		if(quote == realQuote)
		{
			powerSupplierDisconnectTRE{quoteMatch = true;} ->
			PowerSupplierDisconnectTRE()
		}
		else
		{
			Skip
		}
	};

PowerSupplierDisconnectTRE() = 
	Skip;

	
// ---------------------------

// Process of TRE, it consists of three events
TREProc() = TREConnect();

// Firstly, connecting to Power Supplier and TPM
TREConnect() = 
	c1?x.request ->			         	// receive request from Power Supplier
	c1?PS_nonce ->				        	// receive nonce from Power Supplier
	c2!EXTEND ->  				        // extend(receive nonce from Power Supplier)
	c2?publicKey ->
	c2!EXTEND -> 				        // extend(receive key from TPM)
	c1!publicKey -> 
	TREConnected(x);

TREConnected(x) = 
	if(x == PowerSupplier){
		c1?usageQuery -> 
		TREResponseUsageQuery(1)
	}
	
	else{
		c1?usageQuery -> 
		TREResponseUsageQuery(0)
	};
	

// Secondly, respond the usage query
TREResponseUsageQuery(accept) =
	if (accept == 1){
		c2!EXTEND ->                    // extend(accept)
		c2!usageQuery ->                // send usage query to TPM
		c2?usageInfo ->                 // get usage info from TPM (encrypted)
		c2!EXTEND ->                    // extend(calculate)
		c2?price ->                     // get price (encrypted)
		c1!price ->						// send price (encrpted)
		TREDisconnect()
	}
	else{
		c2!EXTEND ->                    // extend(accept)
		TREDisconnect() 				
	};
	
	

// Thirdly, finish the service and disconnect
TREDisconnect() = 
	c2?TPMquote ->
	c1!TPMquote ->
	Skip;
	
	
	
// ---------------------------

// Process of TPM. Since most of TPM job is receiving the extend and prepare keys, these parts are not complete
TPM() = TPMConnect();

TPMConnect() =  
	c2?EXTEND ->              			// receive the message of TRE extend(nonce)
	// ...
	// prepare keys, not implemented yet
	// ...
	c2!publicKey ->                     // send public key
	c2?EXTEND ->                        // receive the message of TRE accept keys
	
	TPMResponseUsageQuery();
	
TPMResponseUsageQuery() = 
	if(TPMAccept == 1){
		c2?EXTEND ->                    // receive the message of TRE accept the usage info query
		c2!usageInfo ->                 // **** Need to encrypt using private key ****
		c2?EXTEND ->                    // receive the message of TRE calculates the price
		TPMEnd()
	}
	else{
		c2?EXTEND ->                    // receive the message of TRE rejects the usage info query
		TPMEnd()
	};
	
// TPM end service
TPMEnd() = c2!TPMquote -> Skip;
	
Protocol = PowerSupplierProc() ||| TREProc() ||| TPM();

#assert Protocol deadlockfree;